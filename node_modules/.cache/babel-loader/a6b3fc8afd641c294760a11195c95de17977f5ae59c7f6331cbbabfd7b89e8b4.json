{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\danie\\\\Desktop\\\\workers_app\\\\src\\\\components\\\\EmployeeList.js\",\n  _s = $RefreshSig$();\n// EmployeeList.js\n\nimport React, { useContext, useEffect } from 'react';\nimport { EmployeeContext } from '../context/EmployeeContext';\nimport EmployeeItem from './EmployeeItem';\nimport ErrorMessage from './ErrorMessage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EmployeeList = ({\n  company\n}) => {\n  _s();\n  const {\n    employees,\n    setEmployees,\n    error,\n    setError\n  } = useContext(EmployeeContext);\n  useEffect(() => {\n    const fetchEmployees = async () => {\n      try {\n        const response = await fetch(`https://randomuser.me/api/?results=10&seed=${company}`);\n        if (!response.ok) {\n          throw new Error('Failed to fetch employees');\n        }\n        const data = await response.json();\n        setEmployees(data.results);\n        setError(null);\n      } catch (err) {\n        setError(err.message); // Use setError here\n      }\n    };\n    fetchEmployees();\n  }, [company, setEmployees, setError]);\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(ErrorMessage, {\n      message: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Employees\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), employees.map((employee, index) => /*#__PURE__*/_jsxDEV(EmployeeItem, {\n      employee: employee\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s(EmployeeList, \"8zfWsuptWIhVnYjEGrwN0/u0uiw=\");\n_c = EmployeeList;\nexport default EmployeeList;\nvar _c;\n$RefreshReg$(_c, \"EmployeeList\");","map":{"version":3,"names":["React","useContext","useEffect","EmployeeContext","EmployeeItem","ErrorMessage","jsxDEV","_jsxDEV","EmployeeList","company","_s","employees","setEmployees","error","setError","fetchEmployees","response","fetch","ok","Error","data","json","results","err","message","fileName","_jsxFileName","lineNumber","columnNumber","children","map","employee","index","_c","$RefreshReg$"],"sources":["C:/Users/danie/Desktop/workers_app/src/components/EmployeeList.js"],"sourcesContent":["// EmployeeList.js\r\n\r\nimport React, { useContext, useEffect } from 'react';\r\nimport { EmployeeContext } from '../context/EmployeeContext';\r\nimport EmployeeItem from './EmployeeItem';\r\nimport ErrorMessage from './ErrorMessage';\r\n\r\nconst EmployeeList = ({ company }) => {\r\n  const { employees, setEmployees, error, setError } = useContext(EmployeeContext);\r\n\r\n  useEffect(() => {\r\n    const fetchEmployees = async () => {\r\n      try {\r\n        const response = await fetch(`https://randomuser.me/api/?results=10&seed=${company}`);\r\n        if (!response.ok) {\r\n          throw new Error('Failed to fetch employees');\r\n        }\r\n        const data = await response.json();\r\n        setEmployees(data.results);\r\n        setError(null);\r\n      } catch (err) {\r\n        setError(err.message); // Use setError here\r\n      }\r\n    };\r\n\r\n    fetchEmployees();\r\n  }, [company, setEmployees, setError]);\r\n\r\n  if (error) {\r\n    return <ErrorMessage message={error} />;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>Employees</h2>\r\n      {employees.map((employee, index) => (\r\n        <EmployeeItem key={index} employee={employee} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EmployeeList;\r\n"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AACpD,SAASC,eAAe,QAAQ,4BAA4B;AAC5D,OAAOC,YAAY,MAAM,gBAAgB;AACzC,OAAOC,YAAY,MAAM,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,YAAY,GAAGA,CAAC;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EACpC,MAAM;IAAEC,SAAS;IAAEC,YAAY;IAAEC,KAAK;IAAEC;EAAS,CAAC,GAAGb,UAAU,CAACE,eAAe,CAAC;EAEhFD,SAAS,CAAC,MAAM;IACd,MAAMa,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8CAA8CR,OAAO,EAAE,CAAC;QACrF,IAAI,CAACO,QAAQ,CAACE,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;QAC9C;QACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;QAClCT,YAAY,CAACQ,IAAI,CAACE,OAAO,CAAC;QAC1BR,QAAQ,CAAC,IAAI,CAAC;MAChB,CAAC,CAAC,OAAOS,GAAG,EAAE;QACZT,QAAQ,CAACS,GAAG,CAACC,OAAO,CAAC,CAAC,CAAC;MACzB;IACF,CAAC;IAEDT,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,CAACN,OAAO,EAAEG,YAAY,EAAEE,QAAQ,CAAC,CAAC;EAErC,IAAID,KAAK,EAAE;IACT,oBAAON,OAAA,CAACF,YAAY;MAACmB,OAAO,EAAEX;IAAM;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACzC;EAEA,oBACErB,OAAA;IAAAsB,QAAA,gBACEtB,OAAA;MAAAsB,QAAA,EAAI;IAAS;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACjBjB,SAAS,CAACmB,GAAG,CAAC,CAACC,QAAQ,EAAEC,KAAK,kBAC7BzB,OAAA,CAACH,YAAY;MAAa2B,QAAQ,EAAEA;IAAS,GAA1BC,KAAK;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAuB,CAChD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAClB,EAAA,CAjCIF,YAAY;AAAAyB,EAAA,GAAZzB,YAAY;AAmClB,eAAeA,YAAY;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}