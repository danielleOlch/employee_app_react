{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\danie\\\\Desktop\\\\workers_app\\\\src\\\\components\\\\EmployeeDetails.js\",\n  _s = $RefreshSig$();\nimport React, { useContext, useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { EmployeeContext } from '../context/EmployeeContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EmployeeDetails = () => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const [employee, setEmployee] = useState(null);\n  const {\n    employees,\n    favorites\n  } = useContext(EmployeeContext);\n  useEffect(() => {\n    const fetchEmployee = async () => {\n      const favoriteEmployee = favorites.find(emp => emp.login.uuid === id);\n      const existingEmployee = employees.find(emp => emp.login.uuid === id);\n      if (favoriteEmployee) {\n        setEmployee(favoriteEmployee);\n      } else if (existingEmployee) {\n        setEmployee(existingEmployee);\n      } else {\n        try {\n          const response = await fetch(`https://randomuser.me/api/?uuid=${id}`);\n          if (!response.ok) {\n            throw new Error('Failed to fetch employee');\n          }\n          const data = await response.json();\n          setEmployee(data.results[0]);\n        } catch (error) {\n          console.error('Error fetching employee:', error);\n        }\n      }\n    };\n    fetchEmployee();\n  }, [id, employees, favorites]);\n  if (!employee) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Employee Details\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Name: \", `${employee.name.first} ${employee.name.last}`]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Email: \", employee.email]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Phone: \", employee.phone]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Location: \", `${employee.location.street.number} ${employee.location.street.name}, ${employee.location.city}, ${employee.location.state}, ${employee.location.country}`]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(EmployeeDetails, \"LeEJrx2nG++MU6YOh8NIuSe1lpE=\", false, function () {\n  return [useParams];\n});\n_c = EmployeeDetails;\nexport default EmployeeDetails;\nvar _c;\n$RefreshReg$(_c, \"EmployeeDetails\");","map":{"version":3,"names":["React","useContext","useEffect","useState","useParams","EmployeeContext","jsxDEV","_jsxDEV","EmployeeDetails","_s","id","employee","setEmployee","employees","favorites","fetchEmployee","favoriteEmployee","find","emp","login","uuid","existingEmployee","response","fetch","ok","Error","data","json","results","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","name","first","last","email","phone","location","street","number","city","state","country","_c","$RefreshReg$"],"sources":["C:/Users/danie/Desktop/workers_app/src/components/EmployeeDetails.js"],"sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { EmployeeContext } from '../context/EmployeeContext';\r\n\r\nconst EmployeeDetails = () => {\r\n  const { id } = useParams();\r\n  const [employee, setEmployee] = useState(null);\r\n  const { employees, favorites } = useContext(EmployeeContext);\r\n\r\n  useEffect(() => {\r\n    const fetchEmployee = async () => {\r\n      const favoriteEmployee = favorites.find(emp => emp.login.uuid === id);\r\n      const existingEmployee = employees.find(emp => emp.login.uuid === id);\r\n\r\n      if (favoriteEmployee) {\r\n        setEmployee(favoriteEmployee);\r\n      } else if (existingEmployee) {\r\n        setEmployee(existingEmployee);\r\n      } else {\r\n        try {\r\n          const response = await fetch(`https://randomuser.me/api/?uuid=${id}`);\r\n          if (!response.ok) {\r\n            throw new Error('Failed to fetch employee');\r\n          }\r\n          const data = await response.json();\r\n          setEmployee(data.results[0]);\r\n        } catch (error) {\r\n          console.error('Error fetching employee:', error);\r\n        }\r\n      }\r\n    };\r\n\r\n    fetchEmployee();\r\n  }, [id, employees, favorites]);\r\n\r\n  if (!employee) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>Employee Details</h2>\r\n      <p>Name: {`${employee.name.first} ${employee.name.last}`}</p>\r\n      <p>Email: {employee.email}</p>\r\n      <p>Phone: {employee.phone}</p>\r\n      <p>Location: {`${employee.location.street.number} ${employee.location.street.name}, ${employee.location.city}, ${employee.location.state}, ${employee.location.country}`}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EmployeeDetails;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC9D,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,SAASC,eAAe,QAAQ,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7D,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM;IAAEC;EAAG,CAAC,GAAGN,SAAS,CAAC,CAAC;EAC1B,MAAM,CAACO,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM;IAAEU,SAAS;IAAEC;EAAU,CAAC,GAAGb,UAAU,CAACI,eAAe,CAAC;EAE5DH,SAAS,CAAC,MAAM;IACd,MAAMa,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,MAAMC,gBAAgB,GAAGF,SAAS,CAACG,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,KAAK,CAACC,IAAI,KAAKV,EAAE,CAAC;MACrE,MAAMW,gBAAgB,GAAGR,SAAS,CAACI,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,KAAK,CAACC,IAAI,KAAKV,EAAE,CAAC;MAErE,IAAIM,gBAAgB,EAAE;QACpBJ,WAAW,CAACI,gBAAgB,CAAC;MAC/B,CAAC,MAAM,IAAIK,gBAAgB,EAAE;QAC3BT,WAAW,CAACS,gBAAgB,CAAC;MAC/B,CAAC,MAAM;QACL,IAAI;UACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,mCAAmCb,EAAE,EAAE,CAAC;UACrE,IAAI,CAACY,QAAQ,CAACE,EAAE,EAAE;YAChB,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;UAC7C;UACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;UAClCf,WAAW,CAACc,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC,CAAC;QAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;QAClD;MACF;IACF,CAAC;IAEDd,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,CAACL,EAAE,EAAEG,SAAS,EAAEC,SAAS,CAAC,CAAC;EAE9B,IAAI,CAACH,QAAQ,EAAE;IACb,oBAAOJ,OAAA;MAAAwB,QAAA,EAAK;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC9B;EAEA,oBACE5B,OAAA;IAAAwB,QAAA,gBACExB,OAAA;MAAAwB,QAAA,EAAI;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACzB5B,OAAA;MAAAwB,QAAA,GAAG,QAAM,EAAC,GAAGpB,QAAQ,CAACyB,IAAI,CAACC,KAAK,IAAI1B,QAAQ,CAACyB,IAAI,CAACE,IAAI,EAAE;IAAA;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC7D5B,OAAA;MAAAwB,QAAA,GAAG,SAAO,EAACpB,QAAQ,CAAC4B,KAAK;IAAA;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC9B5B,OAAA;MAAAwB,QAAA,GAAG,SAAO,EAACpB,QAAQ,CAAC6B,KAAK;IAAA;MAAAR,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC9B5B,OAAA;MAAAwB,QAAA,GAAG,YAAU,EAAC,GAAGpB,QAAQ,CAAC8B,QAAQ,CAACC,MAAM,CAACC,MAAM,IAAIhC,QAAQ,CAAC8B,QAAQ,CAACC,MAAM,CAACN,IAAI,KAAKzB,QAAQ,CAAC8B,QAAQ,CAACG,IAAI,KAAKjC,QAAQ,CAAC8B,QAAQ,CAACI,KAAK,KAAKlC,QAAQ,CAAC8B,QAAQ,CAACK,OAAO,EAAE;IAAA;MAAAd,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1K,CAAC;AAEV,CAAC;AAAC1B,EAAA,CA5CID,eAAe;EAAA,QACJJ,SAAS;AAAA;AAAA2C,EAAA,GADpBvC,eAAe;AA8CrB,eAAeA,eAAe;AAAC,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}